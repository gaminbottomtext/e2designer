name: Build, test and deploy

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  QT_VERSION: 5.12.10
  QT_VERSION_ALIAS: 512

jobs:
  build:
  
    strategy:
      matrix:
        include:
          - runs-on: ubuntu-latest
            coverage: ON
            artifact: e2designer-*-Linux.sh
          - runs-on: windows-latest
            coverage: OFF
            artifact: e2designer-*-win64.exe
          - runs-on: macos-latest
            coverage: OFF
            artifact: e2designer-*.dmg
    
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v2
    
    - name: Install Qt
      env:
        QtVer: $${{env.QT_VERSION_ALIAS}}
      run: |
        sudo apt-add-repository -y ppa:beineri/opt-qt-${{env.QT_VERSION}}-focal
        sudo apt-get update -q
        sudo apt-get install -y qt${QtVer}base qt${QtVer}tools qt${QtVer}svg libgl1-mesa-dev
        /opt/qt${QtVer}/bin/qt${QtVer}-env.sh
      if: matrix.os == 'ubuntu-latest'
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: ${{env.QT_VERSION}}
      if: matrix.os == 'windows-lates' || matrix.os == 'macos-latest'

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCODE_COVERAGE=$${matrix.coverage}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: QT_QPA_PLATFORM=offscreen ctest -C ${{env.BUILD_TYPE}}
    
    - name: Collect coverage
      run: |
        sudo apt-get install -y lcov
        lcov --no-external --directory . --capture --output-file coverage.info
        lcov --remove coverage.info "moc_*" "*.moc" "qrc_*" "tests/*" --output-file coverage.info
        lcov --list coverage.info
        genhtml coverage.info --output-directory coverage-report
      if: ${{matrix.coverage}} == 'ON'
    
    - uses: codecov/codecov-action@v2
      with:
        files: ./coverage.info
      if: ${{matrix.coverage}} == 'ON'

    - uses: actions/upload-artifact@v2
      with:
        name: coverage-report
        path: coverage-report/
      if: ${{matrix.coverage}} == 'ON'
    
    - name: Package
      run: cmake --build build --target package
    
    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: build/$${{matrix.artifact}}
        file_glob: true
        tag: latest
        overwrite: true
        prerelease: true
        body: "Latest build from master"

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: CMake lint
      run: |
        pip3 install cmakelint
        cmakelint --version
        cmakelint --linelength=100 CMakeLists.txt

    - name: clang-format
      run: |
        clang-format --version
        clang-format -style=file -i \
          $(find . \( -path './Qt-Color-Widgets' -o -path './AppImageUpdaterBridge' -o -path './pegtl' \) -prune -o \
          \( -name '*.hpp' -o -name '*.cpp' \) -print)
        git diff --exit-code

